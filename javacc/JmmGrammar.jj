PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES=false;

/*
    Notes on AST annotation:
    - Name of a variable
    - Value of an integer or boolean
    - Is the declared variable an array?
    - If the class extends another class and which

*/


SKIP : " " | "\t" | "\r" | "\n";

TOKEN :

    // Keywords
    < CLASS : "class" > |
    < PUBLIC : "public" > |
    < STATIC : "static" > |
    < IMPORT : "import" > |
    < MAIN : "main" > |
    < VOID : "void" > |
    < EXTENDS : "extends" > |
    < LENGTH : "length"> |
    < NEW : "new" > |
    < THIS : "this" > |
    < RETURN : "return" > |


    // Operations
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< ASSIGN : "=" > |
	< LESS_THAN : "<" > |
	< LOGIC_AND : "&&" > |
	< OPEN_PAREN : "(" > |
    < BANG : "!" > |

	// Literals and Factors
    < TRUE : "true" > |
    < FALSE: "false" > |

	// Delimiters
	< CLOSE_PAREN : ")" > |
	< OPEN_SQUARE_BRACES : "[" > |
	< CLOSE_SQUARE_BRACES : "]" > |
	< OPEN_CURLY_BRACES : "{" > |
	< CLOSE_CURLY_BRACES : "}" > |
	< SEMICOLON : ";" > |
    < INLINE_COMMENT: "//" > |
    < COMMA : ","> |
    < DOT : "." > |
    // < LINE_COMMENT: "/*" > (!"*/" .)* "*/" >;

	// Logic and Control
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |


    // Types
    < BOOLEAN : "boolean" >  |
    < STRING : "String" > |
    < INT : "int" > |

    // Regex
    < IDENTIFIER : ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "_", "0"-"9"])* > |
    < INTEGER_LITERAL : (["0" - "9"])+ >
;

// TODO: Correct this implementation
//SPECIAL_TOKEN: 
//	<INLINE_COMMENT> (~["\n","\r"])* ("\n"|"\r"|"\r\n") 
//; 


Start #Init : ImportDeclaration ClassDeclaration <EOF> ;

ImportDeclaration #void:
    (
        ( ((< IMPORT > < IDENTIFIER > {jjtThis.put("package", lastConsumedToken.getImage());}) )
        (ChainedImportDeclaration)? ) #Import <SEMICOLON>
    )* ;

ChainedImportDeclaration #void:
    (((<DOT> <IDENTIFIER> {jjtThis.put("subpackage", lastConsumedToken.getImage());}))  (ChainedImportDeclaration)?) #ChainedImport
;


ClassDeclaration #ClassDecl:
    <CLASS> <IDENTIFIER> {jjtThis.put("name", lastConsumedToken.getImage());} ((<EXTENDS> <IDENTIFIER> {jjtThis.put("extended_class", lastConsumedToken.getImage());}) #ClassInheritance)?
    <OPEN_CURLY_BRACES>
        (VarDeclaration)*  (MethodDeclaration)*
    <CLOSE_CURLY_BRACES> ;

//DOUBT: How to handle int [] a as the same node
VarDeclaration #VarDecl: Type <IDENTIFIER> {jjtThis.put("name", lastConsumedToken.getImage());} <SEMICOLON> ;
Type #void:
    SCAN 2
    (
        (<STRING> #Str) | (<BOOLEAN> #Bool) | (<IDENTIFIER> #Id)
        | (
            <INT> (<OPEN_SQUARE_BRACES> <CLOSE_SQUARE_BRACES> #Array)? #Int //TODO: maybe {jjtThis.put("sub_type", "array");}
        )
    ) ;

// MethodDeclaration

MethodDeclaration : <PUBLIC> (MainDeclaration | ClassMethodDeclaration) ;

MainDeclaration #Main:
    <STATIC> <VOID> <MAIN> {jjtThis.put("name", "main");}
    <OPEN_PAREN> <STRING> <OPEN_SQUARE_BRACES> <CLOSE_SQUARE_BRACES>
    <IDENTIFIER> {jjtThis.put("arg_array", lastConsumedToken.getImage());} //DOUBT: Does this need to save other information
    <CLOSE_PAREN> <OPEN_CURLY_BRACES> MethodBodyDeclaration <CLOSE_CURLY_BRACES> ;

//DOUBT: how to handle return
ClassMethodDeclaration #MethodDecl:
    Type {jjtThis.put("return_type", lastConsumedToken.getImage());}
    <IDENTIFIER> {jjtThis.put("name", lastConsumedToken.getImage());}
    <OPEN_PAREN>
    (ParameterDeclaration ( < COMMA > ParameterDeclaration)*)?
    < CLOSE_PAREN >
    < OPEN_CURLY_BRACES >
    MethodBodyDeclaration < RETURN > AndExpression #Return <SEMICOLON > < CLOSE_CURLY_BRACES > ;


// DOUBT: Can this be void?
MethodBodyDeclaration #MethodBody: (VarDeclaration)* (Statement)* ;

ParameterDeclaration #void:
    (Type {jjtThis.put("type", lastConsumedToken.getImage());}
    <IDENTIFIER> {jjtThis.put("name", lastConsumedToken.getImage());}) #Param;

//DOUBT: Do the arguments need to be stored in a node
MethodCallDeclaration #MethodCall:
    (<IDENTIFIER> {jjtThis.put("name", lastConsumedToken.getImage());})
    <OPEN_PAREN> (ArgumentsExpression)? <CLOSE_PAREN> ;

ArgumentsExpression: AndExpression (<COMMA> AndExpression)* ;



// Logic and Control

Statement: (
    <OPEN_CURLY_BRACES> (Statement)* <CLOSE_CURLY_BRACES>
    | WhileStatement
    | IfStatement
    | SCAN 2 (<IDENTIFIER> (<OPEN_SQUARE_BRACES> Expression <CLOSE_SQUARE_BRACES>)? <ASSIGN> AndExpression <SEMICOLON>)
    | AndExpression <SEMICOLON>
    )
;

// DOUBT: Should this be void or a more general IfStatement?
IfStatement #void:
    <IF> <OPEN_PAREN>
        AndExpression
    <CLOSE_PAREN>
        Statement
    (<ELSE>
        Statement)?;

WhileStatement #void:
    <WHILE> <OPEN_PAREN>
        AndExpression
    <CLOSE_PAREN>
        Statement;



// Operators

AndExpression #void :
    LessThanExpression
    ( (<LOGIC_AND> LessThanExpression { jjtThis.put("op", "and"); }) #BinOp(2)) *;

LessThanExpression #void:
    (
       AdditiveExpression
    )
    ( (<LESS_THAN> AdditiveExpression { jjtThis.put("op", "lt"); }) #BinOp(2) )* ;



AdditiveExpression #void:
    MultiplicationExpression
    (
         (<PLUS> MultiplicationExpression { jjtThis.put("op", "add"); }) #BinOp(2)
        |
         (<MINUS> MultiplicationExpression { jjtThis.put("op", "sub"); }) #BinOp(2)
    )* ;


MultiplicationExpression #void:
    ArrayExpression
        (
             (<TIMES> ArrayExpression { jjtThis.put("op", "mult"); }) #BinOp(2)
            |
             (<DIVIDE> ArrayExpression { jjtThis.put("op", "div"); }) #BinOp(2)
        )* ;


ArrayExpression #void:
    SCAN 2 NegationExpression (ArrayAccessExpression)? ;

NegationExpression #void:
    (<BANG> #Negation )? ChainedDotExpression;

ChainedDotExpression #void:
    Expression (<DOT> (<LENGTH> | MethodCallDeclaration))* ;

// DOUBT: Does this need a node?
ArrayAccessExpression #ArrayAccess:
    <OPEN_SQUARE_BRACES>
        AndExpression
    <CLOSE_SQUARE_BRACES> ;



// Expression

Keyword #void:
    <TRUE> #True
    | <FALSE> #False
    | <THIS> #This;


// DOUBT: How to handle the third case
Expression:
    (<INTEGER_LITERAL> { jjtThis.put("value", lastConsumedToken.getImage()); }) #IntegerLiteral
    | Keyword
    | <NEW> ((<INT> ArrayAccessExpression | <IDENTIFIER> <OPEN_PAREN> <CLOSE_PAREN>))
    | ( <IDENTIFIER> { jjtThis.put("value", lastConsumedToken.getImage()); }) #ID
    | <OPEN_PAREN> AndExpression <CLOSE_PAREN>;



// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}
