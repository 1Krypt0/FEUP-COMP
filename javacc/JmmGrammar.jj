PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :

    // Operations
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< ASSIGN : "=" > |
	< LESS_THAN : "<" > |
	< LOGIC_AND : "&&" > |
	< OPEN_PAREN : "(" > |
    < BANG : "!" > |

	// Literals and Factors
	< IDENTIFIER : ["a"-"z", "A"-"Z", "_", "$"](["a"-"z", "A"-"Z", "_", "0"-"9"])* > |
    < INTEGER_LITERAL : (["0" - "9"])+ > |
    < TRUE : "true" > |
    < FALSE: "false" > |

	// Delimiters
	< CLOSE_PAREN : ")" > |
	< OPEN_SQUARE_BRACES : "[" > |
	< CLOSE_SQUARE_BRACES : "]" > |
	< OPEN_CURLY_BRACES : "{" > |
	< CLOSE_CURLY_BRACES : "}" > |
	< SEMICOLON : ";" > |
    < INLINE_COMMENT: "//" > |
    < COMMA : ","> |
    < DOT : "." > |
    // < LINE_COMMENT: "/*" > (!"*/" .)* "*/" >;

	// Logic and Control
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |


    // Types
    < BOOLEAN : "boolean" >  |
    < STRING : "String" > |
    < INT : "int" > |

    // Keywords
	< CLASS : "class" > |
	< PUBLIC : "public" > |
	< STATIC : "static" > |
	< IMPORT : "import" > |
	< MAIN : "main" > |
	< VOID : "void" > |
	< EXTENDS : "extends" > |
	< LENGTH : "length"> |
	< NEW : "new" > |
	< THIS : "this" > |
	< RETURN : "return" >
;

//SPECIAL_TOKEN: 
//	<INLINE_COMMENT> (~["\n","\r"])* ("\n"|"\r"|"\r\n") 
//; 


Program : ImportDeclaration ClassDeclaration <EOF> ;

ImportDeclaration : (< IMPORT > < IDENTIFIER > (< DOT > < IDENTIFIER >)* < SEMICOLON >)* ;

ClassDeclaration :
    < CLASS > < IDENTIFIER >  ( < EXTENDS > < IDENTIFIER >)? < OPEN_CURLY_BRACES >
                (VarDeclaration)* (MethodDeclaration)*
                  < CLOSE_CURLY_BRACES > ;

VarDeclaration : Type <IDENTIFIER> < SEMICOLON > ;


MethodDeclaration : < PUBLIC > (MainDeclaration | NormalMethodDeclaration) ;

MainDeclaration : < STATIC > < VOID > < MAIN > <OPEN_PAREN > < STRING > < OPEN_SQUARE_BRACES > < CLOSE_SQUARE_BRACES >
                    < IDENTIFIER > < CLOSE_PAREN > < OPEN_CURLY_BRACES > MethodBody < CLOSE_CURLY_BRACES > ;


NormalMethodDeclaration : Type < IDENTIFIER > < OPEN_PAREN >
                    (ParameterDeclaration ( < COMMA > ParameterDeclaration)*)? < CLOSE_PAREN > < OPEN_CURLY_BRACES >
                    MethodBody < RETURN > Expression <SEMICOLON > < CLOSE_CURLY_BRACES > ;

MethodBody: (VarDeclaration)* (Statement)* ;


ParameterDeclaration : Type <IDENTIFIER> ;

Type : <INT> (<OPEN_SQUARE_BRACES> <CLOSE_SQUARE_BRACES>)? | <BOOLEAN> | <IDENTIFIER> ;

Statement:
    <OPEN_CURLY_BRACES> (Statement)* <CLOSE_CURLY_BRACES>
    | <WHILE> <OPEN_PAREN> Expression <CLOSE_PAREN> Statement
    | Expression <SEMICOLON>
    | <IDENTIFIER> <ASSIGN> Expression <SEMICOLON>
    | <IDENTIFIER> <OPEN_SQUARE_BRACES> Expression <CLOSE_SQUARE_BRACES> <ASSIGN> Expression <SEMICOLON> ;

IfStatement: <IF> <OPEN_PAREN> Expression <CLOSE_PAREN> Statement <ELSE> Statement ;

WhileStatement: <WHILE> <OPEN_PAREN> ExpressionAnd <CLOSE_PAREN> Statement;

ExpressionAnd : ExpressionLessThan (<LOGIC_AND> ExpressionLessThan)* ;

ExpressionLessThan: (ExpressionAdd | ExpressionSub) ( <LESS_THAN> (ExpressionAdd | ExpressionSub) )* ;

ExpressionAdd: (ExpressionMul | ExpressionDiv) (<PLUS> (ExpressionMul | ExpressionDiv))* ;

ExpressionSub: (ExpressionMul | ExpressionDiv) (<MINUS> (ExpressionMul | ExpressionDiv))* ;

ExpressionMul: ExpressionArray (<TIMES> ExpressionArray)* ;

ExpressionDiv:  ExpressionArray (<DIVIDE> ExpressionArray)* ;

ExpressionArray: ExpressionNot (Array)? ;

Array: <OPEN_SQUARE_BRACES> ExpressionAnd <CLOSE_SQUARE_BRACES> ;

ExpressionNot: ExpressionDot | (<BANG> ExpressionNot);

ExpressionDot: Expression (<DOT> (<LENGTH> | MethodCall))* ;

MethodCall: <IDENTIFIER> <OPEN_PAREN> Params <CLOSE_PAREN> ;

Params: ExpressionAnd (<COMMA> ExpressionAnd)* ;

Expression:
    <INTEGER_LITERAL>
    | <TRUE>
    | <FALSE>
    | <THIS>
    | <IDENTIFIER>
    | <OPEN_PAREN> ExpressionAnd <CLOSE_PAREN>
    | <NEW> (<INT> Array) | (<IDENTIFIER> <OPEN_PAREN> <CLOSE_PAREN>) ;
